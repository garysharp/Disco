// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace Disco.Web.Controllers
{
    public partial class DeviceController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public DeviceController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected DeviceController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Export()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Export);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Import()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Import);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ImportHeaders()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ImportHeaders);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ImportReview()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ImportReview);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Show()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Show);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public DeviceController Actions { get { return MVC.Device; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Device";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Device";
        [GeneratedCode("T4MVC", "2.0")]
        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string AddOffline = "AddOffline";
            public readonly string Export = "Export";
            public readonly string Import = "Import";
            public readonly string ImportHeaders = "ImportHeaders";
            public readonly string ImportReview = "ImportReview";
            public readonly string Show = "Show";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string AddOffline = "AddOffline";
            public const string Export = "Export";
            public const string Import = "Import";
            public const string ImportHeaders = "ImportHeaders";
            public const string ImportReview = "ImportReview";
            public const string Show = "Show";
        }


        static readonly ActionParamsClass_AddOffline s_params_AddOffline = new ActionParamsClass_AddOffline();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddOffline AddOfflineParams { get { return s_params_AddOffline; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddOffline
        {
            public readonly string m = "m";
        }
        static readonly ActionParamsClass_Export s_params_Export = new ActionParamsClass_Export();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Export ExportParams { get { return s_params_Export; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Export
        {
            public readonly string DownloadId = "DownloadId";
            public readonly string ExportType = "ExportType";
            public readonly string ExportTypeTargetId = "ExportTypeTargetId";
        }
        static readonly ActionParamsClass_Import s_params_Import = new ActionParamsClass_Import();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Import ImportParams { get { return s_params_Import; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Import
        {
            public readonly string Id = "Id";
        }
        static readonly ActionParamsClass_ImportHeaders s_params_ImportHeaders = new ActionParamsClass_ImportHeaders();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ImportHeaders ImportHeadersParams { get { return s_params_ImportHeaders; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ImportHeaders
        {
            public readonly string Id = "Id";
        }
        static readonly ActionParamsClass_ImportReview s_params_ImportReview = new ActionParamsClass_ImportReview();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ImportReview ImportReviewParams { get { return s_params_ImportReview; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ImportReview
        {
            public readonly string Id = "Id";
        }
        static readonly ActionParamsClass_Show s_params_Show = new ActionParamsClass_Show();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Show ShowParams { get { return s_params_Show; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Show
        {
            public readonly string id = "id";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _DeviceTable = "_DeviceTable";
                public readonly string _ViewStart = "_ViewStart";
                public readonly string AddOffline = "AddOffline";
                public readonly string Export = "Export";
                public readonly string Import = "Import";
                public readonly string ImportHeaders = "ImportHeaders";
                public readonly string ImportReview = "ImportReview";
                public readonly string Index = "Index";
                public readonly string Show = "Show";
            }
            public readonly string _DeviceTable = "~/Views/Device/_DeviceTable.cshtml";
            public readonly string _ViewStart = "~/Views/Device/_ViewStart.cshtml";
            public readonly string AddOffline = "~/Views/Device/AddOffline.cshtml";
            public readonly string Export = "~/Views/Device/Export.cshtml";
            public readonly string Import = "~/Views/Device/Import.cshtml";
            public readonly string ImportHeaders = "~/Views/Device/ImportHeaders.cshtml";
            public readonly string ImportReview = "~/Views/Device/ImportReview.cshtml";
            public readonly string Index = "~/Views/Device/Index.cshtml";
            public readonly string Show = "~/Views/Device/Show.cshtml";
            static readonly _DevicePartsClass s_DeviceParts = new _DevicePartsClass();
            public _DevicePartsClass DeviceParts { get { return s_DeviceParts; } }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public partial class _DevicePartsClass
            {
                static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
                public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
                public class _ViewNamesClass
                {
                    public readonly string _AssignmentHistory = "_AssignmentHistory";
                    public readonly string _Certificates = "_Certificates";
                    public readonly string _Details = "_Details";
                    public readonly string _Jobs = "_Jobs";
                    public readonly string _Resources = "_Resources";
                    public readonly string _Subject = "_Subject";
                }
                public readonly string _AssignmentHistory = "~/Views/Device/DeviceParts/_AssignmentHistory.cshtml";
                public readonly string _Certificates = "~/Views/Device/DeviceParts/_Certificates.cshtml";
                public readonly string _Details = "~/Views/Device/DeviceParts/_Details.cshtml";
                public readonly string _Jobs = "~/Views/Device/DeviceParts/_Jobs.cshtml";
                public readonly string _Resources = "~/Views/Device/DeviceParts/_Resources.cshtml";
                public readonly string _Subject = "~/Views/Device/DeviceParts/_Subject.cshtml";
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_DeviceController : Disco.Web.Controllers.DeviceController
    {
        public T4MVC_DeviceController() : base(Dummy.Instance) { }

        [NonAction]
        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void AddOfflineOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult AddOffline()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddOffline);
            AddOfflineOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void AddOfflineOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Disco.Web.Models.Device.AddOfflineModel m);

        [NonAction]
        public override System.Web.Mvc.ActionResult AddOffline(Disco.Web.Models.Device.AddOfflineModel m)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddOffline);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "m", m);
            AddOfflineOverride(callInfo, m);
            return callInfo;
        }

        [NonAction]
        partial void ExportOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string DownloadId, Disco.Models.Services.Devices.Exporting.DeviceExportTypes? ExportType, int? ExportTypeTargetId);

        [NonAction]
        public override System.Web.Mvc.ActionResult Export(string DownloadId, Disco.Models.Services.Devices.Exporting.DeviceExportTypes? ExportType, int? ExportTypeTargetId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Export);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "DownloadId", DownloadId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ExportType", ExportType);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ExportTypeTargetId", ExportTypeTargetId);
            ExportOverride(callInfo, DownloadId, ExportType, ExportTypeTargetId);
            return callInfo;
        }

        [NonAction]
        partial void ImportOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string Id);

        [NonAction]
        public override System.Web.Mvc.ActionResult Import(string Id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Import);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Id", Id);
            ImportOverride(callInfo, Id);
            return callInfo;
        }

        [NonAction]
        partial void ImportHeadersOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string Id);

        [NonAction]
        public override System.Web.Mvc.ActionResult ImportHeaders(string Id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ImportHeaders);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Id", Id);
            ImportHeadersOverride(callInfo, Id);
            return callInfo;
        }

        [NonAction]
        partial void ImportReviewOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string Id);

        [NonAction]
        public override System.Web.Mvc.ActionResult ImportReview(string Id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ImportReview);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Id", Id);
            ImportReviewOverride(callInfo, Id);
            return callInfo;
        }

        [NonAction]
        partial void ShowOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id);

        [NonAction]
        public override System.Web.Mvc.ActionResult Show(string id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Show);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ShowOverride(callInfo, id);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
