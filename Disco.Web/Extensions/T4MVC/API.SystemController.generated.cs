// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace Disco.Web.Areas.API.Controllers
{
    public partial class SystemController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public SystemController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected SystemController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateOrganisationName()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateOrganisationName);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateOrganisationAddress()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateOrganisationAddress);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult DeleteOrganisationAddress()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteOrganisationAddress);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateMultiSiteMode()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateMultiSiteMode);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateActiveDirectorySearchScope()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateActiveDirectorySearchScope);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateActiveDirectorySearchAllServers()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateActiveDirectorySearchAllServers);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateActiveDirectorySearchWildcardSuffixOnly()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateActiveDirectorySearchWildcardSuffixOnly);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult SearchSubjects()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SearchSubjects);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult SearchGroupSubjects()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SearchGroupSubjects);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Subject()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Subject);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult SyncActiveDirectoryManagedGroup()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SyncActiveDirectoryManagedGroup);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateProxySettings()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateProxySettings);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult UpdateEmailSettings()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateEmailSettings);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult SendTestEmail()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SendTestEmail);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public SystemController Actions { get { return MVC.API.System; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "API";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "System";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "System";
        [GeneratedCode("T4MVC", "2.0")]
        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string UpdateLastNetworkLogonDates = "UpdateLastNetworkLogonDates";
            public readonly string UpdateAttachmentThumbnails = "UpdateAttachmentThumbnails";
            public readonly string UpdateADDeviceDescriptions = "UpdateADDeviceDescriptions";
            public readonly string UpdateCheck = "UpdateCheck";
            public readonly string UpdateOrganisationName = "UpdateOrganisationName";
            public readonly string OrganisationLogo = "OrganisationLogo";
            public readonly string UpdateOrganisationAddress = "UpdateOrganisationAddress";
            public readonly string DeleteOrganisationAddress = "DeleteOrganisationAddress";
            public readonly string UpdateMultiSiteMode = "UpdateMultiSiteMode";
            public readonly string UpdateActiveDirectorySearchScope = "UpdateActiveDirectorySearchScope";
            public readonly string UpdateActiveDirectorySearchAllServers = "UpdateActiveDirectorySearchAllServers";
            public readonly string UpdateActiveDirectorySearchWildcardSuffixOnly = "UpdateActiveDirectorySearchWildcardSuffixOnly";
            public readonly string DomainOrganisationalUnits = "DomainOrganisationalUnits";
            public readonly string SearchSubjects = "SearchSubjects";
            public readonly string SearchGroupSubjects = "SearchGroupSubjects";
            public readonly string Subject = "Subject";
            public readonly string SyncActiveDirectoryManagedGroup = "SyncActiveDirectoryManagedGroup";
            public readonly string UpdateProxySettings = "UpdateProxySettings";
            public readonly string UpdateEmailSettings = "UpdateEmailSettings";
            public readonly string SendTestEmail = "SendTestEmail";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string UpdateLastNetworkLogonDates = "UpdateLastNetworkLogonDates";
            public const string UpdateAttachmentThumbnails = "UpdateAttachmentThumbnails";
            public const string UpdateADDeviceDescriptions = "UpdateADDeviceDescriptions";
            public const string UpdateCheck = "UpdateCheck";
            public const string UpdateOrganisationName = "UpdateOrganisationName";
            public const string OrganisationLogo = "OrganisationLogo";
            public const string UpdateOrganisationAddress = "UpdateOrganisationAddress";
            public const string DeleteOrganisationAddress = "DeleteOrganisationAddress";
            public const string UpdateMultiSiteMode = "UpdateMultiSiteMode";
            public const string UpdateActiveDirectorySearchScope = "UpdateActiveDirectorySearchScope";
            public const string UpdateActiveDirectorySearchAllServers = "UpdateActiveDirectorySearchAllServers";
            public const string UpdateActiveDirectorySearchWildcardSuffixOnly = "UpdateActiveDirectorySearchWildcardSuffixOnly";
            public const string DomainOrganisationalUnits = "DomainOrganisationalUnits";
            public const string SearchSubjects = "SearchSubjects";
            public const string SearchGroupSubjects = "SearchGroupSubjects";
            public const string Subject = "Subject";
            public const string SyncActiveDirectoryManagedGroup = "SyncActiveDirectoryManagedGroup";
            public const string UpdateProxySettings = "UpdateProxySettings";
            public const string UpdateEmailSettings = "UpdateEmailSettings";
            public const string SendTestEmail = "SendTestEmail";
        }


        static readonly ActionParamsClass_UpdateOrganisationName s_params_UpdateOrganisationName = new ActionParamsClass_UpdateOrganisationName();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateOrganisationName UpdateOrganisationNameParams { get { return s_params_UpdateOrganisationName; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateOrganisationName
        {
            public readonly string OrganisationName = "OrganisationName";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_OrganisationLogo s_params_OrganisationLogo = new ActionParamsClass_OrganisationLogo();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_OrganisationLogo OrganisationLogoParams { get { return s_params_OrganisationLogo; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_OrganisationLogo
        {
            public readonly string Width = "Width";
            public readonly string Height = "Height";
            public readonly string v = "v";
            public readonly string redirect = "redirect";
            public readonly string Image = "Image";
            public readonly string ResetLogo = "ResetLogo";
        }
        static readonly ActionParamsClass_UpdateOrganisationAddress s_params_UpdateOrganisationAddress = new ActionParamsClass_UpdateOrganisationAddress();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateOrganisationAddress UpdateOrganisationAddressParams { get { return s_params_UpdateOrganisationAddress; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateOrganisationAddress
        {
            public readonly string organisationAddress = "organisationAddress";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_DeleteOrganisationAddress s_params_DeleteOrganisationAddress = new ActionParamsClass_DeleteOrganisationAddress();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeleteOrganisationAddress DeleteOrganisationAddressParams { get { return s_params_DeleteOrganisationAddress; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeleteOrganisationAddress
        {
            public readonly string Id = "Id";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateMultiSiteMode s_params_UpdateMultiSiteMode = new ActionParamsClass_UpdateMultiSiteMode();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateMultiSiteMode UpdateMultiSiteModeParams { get { return s_params_UpdateMultiSiteMode; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateMultiSiteMode
        {
            public readonly string MultiSiteMode = "MultiSiteMode";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateActiveDirectorySearchScope s_params_UpdateActiveDirectorySearchScope = new ActionParamsClass_UpdateActiveDirectorySearchScope();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateActiveDirectorySearchScope UpdateActiveDirectorySearchScopeParams { get { return s_params_UpdateActiveDirectorySearchScope; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateActiveDirectorySearchScope
        {
            public readonly string Containers = "Containers";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateActiveDirectorySearchAllServers s_params_UpdateActiveDirectorySearchAllServers = new ActionParamsClass_UpdateActiveDirectorySearchAllServers();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateActiveDirectorySearchAllServers UpdateActiveDirectorySearchAllServersParams { get { return s_params_UpdateActiveDirectorySearchAllServers; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateActiveDirectorySearchAllServers
        {
            public readonly string SearchAllServers = "SearchAllServers";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateActiveDirectorySearchWildcardSuffixOnly s_params_UpdateActiveDirectorySearchWildcardSuffixOnly = new ActionParamsClass_UpdateActiveDirectorySearchWildcardSuffixOnly();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateActiveDirectorySearchWildcardSuffixOnly UpdateActiveDirectorySearchWildcardSuffixOnlyParams { get { return s_params_UpdateActiveDirectorySearchWildcardSuffixOnly; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateActiveDirectorySearchWildcardSuffixOnly
        {
            public readonly string SearchWildcardSuffixOnly = "SearchWildcardSuffixOnly";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_SearchSubjects s_params_SearchSubjects = new ActionParamsClass_SearchSubjects();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SearchSubjects SearchSubjectsParams { get { return s_params_SearchSubjects; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SearchSubjects
        {
            public readonly string term = "term";
        }
        static readonly ActionParamsClass_SearchGroupSubjects s_params_SearchGroupSubjects = new ActionParamsClass_SearchGroupSubjects();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SearchGroupSubjects SearchGroupSubjectsParams { get { return s_params_SearchGroupSubjects; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SearchGroupSubjects
        {
            public readonly string term = "term";
        }
        static readonly ActionParamsClass_Subject s_params_Subject = new ActionParamsClass_Subject();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Subject SubjectParams { get { return s_params_Subject; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Subject
        {
            public readonly string Id = "Id";
        }
        static readonly ActionParamsClass_SyncActiveDirectoryManagedGroup s_params_SyncActiveDirectoryManagedGroup = new ActionParamsClass_SyncActiveDirectoryManagedGroup();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SyncActiveDirectoryManagedGroup SyncActiveDirectoryManagedGroupParams { get { return s_params_SyncActiveDirectoryManagedGroup; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SyncActiveDirectoryManagedGroup
        {
            public readonly string id = "id";
            public readonly string redirectUrl = "redirectUrl";
        }
        static readonly ActionParamsClass_UpdateProxySettings s_params_UpdateProxySettings = new ActionParamsClass_UpdateProxySettings();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateProxySettings UpdateProxySettingsParams { get { return s_params_UpdateProxySettings; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateProxySettings
        {
            public readonly string ProxyAddress = "ProxyAddress";
            public readonly string ProxyPort = "ProxyPort";
            public readonly string ProxyUsername = "ProxyUsername";
            public readonly string ProxyPassword = "ProxyPassword";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_UpdateEmailSettings s_params_UpdateEmailSettings = new ActionParamsClass_UpdateEmailSettings();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateEmailSettings UpdateEmailSettingsParams { get { return s_params_UpdateEmailSettings; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateEmailSettings
        {
            public readonly string SmtpServer = "SmtpServer";
            public readonly string SmtpPort = "SmtpPort";
            public readonly string FromAddress = "FromAddress";
            public readonly string ReplyToAddress = "ReplyToAddress";
            public readonly string EnableSsl = "EnableSsl";
            public readonly string Username = "Username";
            public readonly string Password = "Password";
            public readonly string redirect = "redirect";
        }
        static readonly ActionParamsClass_SendTestEmail s_params_SendTestEmail = new ActionParamsClass_SendTestEmail();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SendTestEmail SendTestEmailParams { get { return s_params_SendTestEmail; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SendTestEmail
        {
            public readonly string Recipient = "Recipient";
            public readonly string redirect = "redirect";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_SystemController : Disco.Web.Areas.API.Controllers.SystemController
    {
        public T4MVC_SystemController() : base(Dummy.Instance) { }

        [NonAction]
        partial void UpdateLastNetworkLogonDatesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult UpdateLastNetworkLogonDates()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateLastNetworkLogonDates);
            UpdateLastNetworkLogonDatesOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void UpdateAttachmentThumbnailsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult UpdateAttachmentThumbnails()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateAttachmentThumbnails);
            UpdateAttachmentThumbnailsOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void UpdateADDeviceDescriptionsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult UpdateADDeviceDescriptions()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateADDeviceDescriptions);
            UpdateADDeviceDescriptionsOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void UpdateCheckOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult UpdateCheck()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateCheck);
            UpdateCheckOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void UpdateOrganisationNameOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string OrganisationName, bool redirect);

        [NonAction]
        public override System.Web.Mvc.ActionResult UpdateOrganisationName(string OrganisationName, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateOrganisationName);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "OrganisationName", OrganisationName);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateOrganisationNameOverride(callInfo, OrganisationName, redirect);
            return callInfo;
        }

        [NonAction]
        partial void OrganisationLogoOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int Width, int Height, string v);

        [NonAction]
        public override System.Web.Mvc.ActionResult OrganisationLogo(int Width, int Height, string v)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.OrganisationLogo);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Width", Width);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Height", Height);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "v", v);
            OrganisationLogoOverride(callInfo, Width, Height, v);
            return callInfo;
        }

        [NonAction]
        partial void OrganisationLogoOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, bool redirect, System.Web.HttpPostedFileBase Image, bool? ResetLogo);

        [NonAction]
        public override System.Web.Mvc.ActionResult OrganisationLogo(bool redirect, System.Web.HttpPostedFileBase Image, bool? ResetLogo)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.OrganisationLogo);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Image", Image);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ResetLogo", ResetLogo);
            OrganisationLogoOverride(callInfo, redirect, Image, ResetLogo);
            return callInfo;
        }

        [NonAction]
        partial void UpdateOrganisationAddressOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Disco.Models.BI.Config.OrganisationAddress organisationAddress, bool redirect);

        [NonAction]
        public override System.Web.Mvc.ActionResult UpdateOrganisationAddress(Disco.Models.BI.Config.OrganisationAddress organisationAddress, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateOrganisationAddress);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "organisationAddress", organisationAddress);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateOrganisationAddressOverride(callInfo, organisationAddress, redirect);
            return callInfo;
        }

        [NonAction]
        partial void DeleteOrganisationAddressOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int Id, bool redirect);

        [NonAction]
        public override System.Web.Mvc.ActionResult DeleteOrganisationAddress(int Id, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteOrganisationAddress);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Id", Id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            DeleteOrganisationAddressOverride(callInfo, Id, redirect);
            return callInfo;
        }

        [NonAction]
        partial void UpdateMultiSiteModeOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, bool MultiSiteMode, bool redirect);

        [NonAction]
        public override System.Web.Mvc.ActionResult UpdateMultiSiteMode(bool MultiSiteMode, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateMultiSiteMode);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "MultiSiteMode", MultiSiteMode);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateMultiSiteModeOverride(callInfo, MultiSiteMode, redirect);
            return callInfo;
        }

        [NonAction]
        partial void UpdateActiveDirectorySearchScopeOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, System.Collections.Generic.List<string> Containers, bool redirect);

        [NonAction]
        public override System.Web.Mvc.ActionResult UpdateActiveDirectorySearchScope(System.Collections.Generic.List<string> Containers, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateActiveDirectorySearchScope);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Containers", Containers);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateActiveDirectorySearchScopeOverride(callInfo, Containers, redirect);
            return callInfo;
        }

        [NonAction]
        partial void UpdateActiveDirectorySearchAllServersOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, bool SearchAllServers, bool redirect);

        [NonAction]
        public override System.Web.Mvc.ActionResult UpdateActiveDirectorySearchAllServers(bool SearchAllServers, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateActiveDirectorySearchAllServers);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "SearchAllServers", SearchAllServers);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateActiveDirectorySearchAllServersOverride(callInfo, SearchAllServers, redirect);
            return callInfo;
        }

        [NonAction]
        partial void UpdateActiveDirectorySearchWildcardSuffixOnlyOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, bool SearchWildcardSuffixOnly, bool redirect);

        [NonAction]
        public override System.Web.Mvc.ActionResult UpdateActiveDirectorySearchWildcardSuffixOnly(bool SearchWildcardSuffixOnly, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateActiveDirectorySearchWildcardSuffixOnly);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "SearchWildcardSuffixOnly", SearchWildcardSuffixOnly);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateActiveDirectorySearchWildcardSuffixOnlyOverride(callInfo, SearchWildcardSuffixOnly, redirect);
            return callInfo;
        }

        [NonAction]
        partial void DomainOrganisationalUnitsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult DomainOrganisationalUnits()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DomainOrganisationalUnits);
            DomainOrganisationalUnitsOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void SearchSubjectsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string term);

        [NonAction]
        public override System.Web.Mvc.ActionResult SearchSubjects(string term)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SearchSubjects);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "term", term);
            SearchSubjectsOverride(callInfo, term);
            return callInfo;
        }

        [NonAction]
        partial void SearchGroupSubjectsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string term);

        [NonAction]
        public override System.Web.Mvc.ActionResult SearchGroupSubjects(string term)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SearchGroupSubjects);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "term", term);
            SearchGroupSubjectsOverride(callInfo, term);
            return callInfo;
        }

        [NonAction]
        partial void SubjectOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string Id);

        [NonAction]
        public override System.Web.Mvc.ActionResult Subject(string Id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Subject);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Id", Id);
            SubjectOverride(callInfo, Id);
            return callInfo;
        }

        [NonAction]
        partial void SyncActiveDirectoryManagedGroupOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id, string redirectUrl);

        [NonAction]
        public override System.Web.Mvc.ActionResult SyncActiveDirectoryManagedGroup(string id, string redirectUrl)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SyncActiveDirectoryManagedGroup);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirectUrl", redirectUrl);
            SyncActiveDirectoryManagedGroupOverride(callInfo, id, redirectUrl);
            return callInfo;
        }

        [NonAction]
        partial void UpdateProxySettingsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string ProxyAddress, int? ProxyPort, string ProxyUsername, string ProxyPassword, bool redirect);

        [NonAction]
        public override System.Web.Mvc.ActionResult UpdateProxySettings(string ProxyAddress, int? ProxyPort, string ProxyUsername, string ProxyPassword, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateProxySettings);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ProxyAddress", ProxyAddress);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ProxyPort", ProxyPort);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ProxyUsername", ProxyUsername);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ProxyPassword", ProxyPassword);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateProxySettingsOverride(callInfo, ProxyAddress, ProxyPort, ProxyUsername, ProxyPassword, redirect);
            return callInfo;
        }

        [NonAction]
        partial void UpdateEmailSettingsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string SmtpServer, int? SmtpPort, string FromAddress, string ReplyToAddress, bool EnableSsl, string Username, string Password, bool redirect);

        [NonAction]
        public override System.Web.Mvc.ActionResult UpdateEmailSettings(string SmtpServer, int? SmtpPort, string FromAddress, string ReplyToAddress, bool EnableSsl, string Username, string Password, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UpdateEmailSettings);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "SmtpServer", SmtpServer);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "SmtpPort", SmtpPort);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "FromAddress", FromAddress);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ReplyToAddress", ReplyToAddress);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "EnableSsl", EnableSsl);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Username", Username);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Password", Password);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            UpdateEmailSettingsOverride(callInfo, SmtpServer, SmtpPort, FromAddress, ReplyToAddress, EnableSsl, Username, Password, redirect);
            return callInfo;
        }

        [NonAction]
        partial void SendTestEmailOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string Recipient, bool redirect);

        [NonAction]
        public override System.Web.Mvc.ActionResult SendTestEmail(string Recipient, bool redirect)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SendTestEmail);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Recipient", Recipient);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "redirect", redirect);
            SendTestEmailOverride(callInfo, Recipient, redirect);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
