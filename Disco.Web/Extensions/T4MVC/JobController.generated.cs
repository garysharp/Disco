// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace Disco.Web.Controllers
{
    public partial class JobController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public JobController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected JobController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Queue()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Queue);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Show()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Show);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Create()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Create);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult LogWarranty()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.LogWarranty);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult WarrantyProviderJobDetails()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.WarrantyProviderJobDetails);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult LogRepair()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.LogRepair);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult RepairProviderJobDetails()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.RepairProviderJobDetails);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public JobController Actions { get { return MVC.Job; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Job";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Job";
        [GeneratedCode("T4MVC", "2.0")]
        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string Queue = "Queue";
            public readonly string AllOpen = "AllOpen";
            public readonly string AwaitingTechnicianAction = "AwaitingTechnicianAction";
            public readonly string DevicesReadyForReturn = "DevicesReadyForReturn";
            public readonly string DevicesAwaitingRepair = "DevicesAwaitingRepair";
            public readonly string AwaitingFinance = "AwaitingFinance";
            public readonly string AwaitingFinanceCharge = "AwaitingFinanceCharge";
            public readonly string AwaitingFinancePayment = "AwaitingFinancePayment";
            public readonly string AwaitingFinanceInsuranceProcessing = "AwaitingFinanceInsuranceProcessing";
            public readonly string AwaitingFinanceAgreementBreach = "AwaitingFinanceAgreementBreach";
            public readonly string AwaitingUserAction = "AwaitingUserAction";
            public readonly string RecentlyClosed = "RecentlyClosed";
            public readonly string Locations = "Locations";
            public readonly string LongRunning = "LongRunning";
            public readonly string Stale = "Stale";
            public readonly string Show = "Show";
            public readonly string Create = "Create";
            public readonly string LogWarranty = "LogWarranty";
            public readonly string WarrantyProviderJobDetails = "WarrantyProviderJobDetails";
            public readonly string LogRepair = "LogRepair";
            public readonly string RepairProviderJobDetails = "RepairProviderJobDetails";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string Queue = "Queue";
            public const string AllOpen = "AllOpen";
            public const string AwaitingTechnicianAction = "AwaitingTechnicianAction";
            public const string DevicesReadyForReturn = "DevicesReadyForReturn";
            public const string DevicesAwaitingRepair = "DevicesAwaitingRepair";
            public const string AwaitingFinance = "AwaitingFinance";
            public const string AwaitingFinanceCharge = "AwaitingFinanceCharge";
            public const string AwaitingFinancePayment = "AwaitingFinancePayment";
            public const string AwaitingFinanceInsuranceProcessing = "AwaitingFinanceInsuranceProcessing";
            public const string AwaitingFinanceAgreementBreach = "AwaitingFinanceAgreementBreach";
            public const string AwaitingUserAction = "AwaitingUserAction";
            public const string RecentlyClosed = "RecentlyClosed";
            public const string Locations = "Locations";
            public const string LongRunning = "LongRunning";
            public const string Stale = "Stale";
            public const string Show = "Show";
            public const string Create = "Create";
            public const string LogWarranty = "LogWarranty";
            public const string WarrantyProviderJobDetails = "WarrantyProviderJobDetails";
            public const string LogRepair = "LogRepair";
            public const string RepairProviderJobDetails = "RepairProviderJobDetails";
        }


        static readonly ActionParamsClass_Queue s_params_Queue = new ActionParamsClass_Queue();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Queue QueueParams { get { return s_params_Queue; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Queue
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_Show s_params_Show = new ActionParamsClass_Show();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Show ShowParams { get { return s_params_Show; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Show
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_Create s_params_Create = new ActionParamsClass_Create();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Create CreateParams { get { return s_params_Create; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Create
        {
            public readonly string DeviceSerialNumber = "DeviceSerialNumber";
            public readonly string UserId = "UserId";
            public readonly string m = "m";
        }
        static readonly ActionParamsClass_LogWarranty s_params_LogWarranty = new ActionParamsClass_LogWarranty();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_LogWarranty LogWarrantyParams { get { return s_params_LogWarranty; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_LogWarranty
        {
            public readonly string id = "id";
            public readonly string WarrantyProviderId = "WarrantyProviderId";
            public readonly string OrganisationAddressId = "OrganisationAddressId";
            public readonly string m = "m";
            public readonly string form = "form";
        }
        static readonly ActionParamsClass_WarrantyProviderJobDetails s_params_WarrantyProviderJobDetails = new ActionParamsClass_WarrantyProviderJobDetails();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_WarrantyProviderJobDetails WarrantyProviderJobDetailsParams { get { return s_params_WarrantyProviderJobDetails; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_WarrantyProviderJobDetails
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_LogRepair s_params_LogRepair = new ActionParamsClass_LogRepair();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_LogRepair LogRepairParams { get { return s_params_LogRepair; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_LogRepair
        {
            public readonly string id = "id";
            public readonly string RepairProviderId = "RepairProviderId";
            public readonly string OrganisationAddressId = "OrganisationAddressId";
            public readonly string m = "m";
            public readonly string form = "form";
        }
        static readonly ActionParamsClass_RepairProviderJobDetails s_params_RepairProviderJobDetails = new ActionParamsClass_RepairProviderJobDetails();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_RepairProviderJobDetails RepairProviderJobDetailsParams { get { return s_params_RepairProviderJobDetails; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_RepairProviderJobDetails
        {
            public readonly string id = "id";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _CreateSubject = "_CreateSubject";
                public readonly string _ViewStart = "_ViewStart";
                public readonly string Create = "Create";
                public readonly string Create_Redirect = "Create_Redirect";
                public readonly string Index = "Index";
                public readonly string List = "List";
                public readonly string LogRepair = "LogRepair";
                public readonly string LogRepairDisclose = "LogRepairDisclose";
                public readonly string LogRepairError = "LogRepairError";
                public readonly string LogWarranty = "LogWarranty";
                public readonly string LogWarrantyDisclose = "LogWarrantyDisclose";
                public readonly string LogWarrantyError = "LogWarrantyError";
                public readonly string RepairProviderJobDetails = "RepairProviderJobDetails";
                public readonly string Show = "Show";
                public readonly string WarrantyProviderJobDetails = "WarrantyProviderJobDetails";
            }
            public readonly string _CreateSubject = "~/Views/Job/_CreateSubject.cshtml";
            public readonly string _ViewStart = "~/Views/Job/_ViewStart.cshtml";
            public readonly string Create = "~/Views/Job/Create.cshtml";
            public readonly string Create_Redirect = "~/Views/Job/Create_Redirect.cshtml";
            public readonly string Index = "~/Views/Job/Index.cshtml";
            public readonly string List = "~/Views/Job/List.cshtml";
            public readonly string LogRepair = "~/Views/Job/LogRepair.cshtml";
            public readonly string LogRepairDisclose = "~/Views/Job/LogRepairDisclose.cshtml";
            public readonly string LogRepairError = "~/Views/Job/LogRepairError.cshtml";
            public readonly string LogWarranty = "~/Views/Job/LogWarranty.cshtml";
            public readonly string LogWarrantyDisclose = "~/Views/Job/LogWarrantyDisclose.cshtml";
            public readonly string LogWarrantyError = "~/Views/Job/LogWarrantyError.cshtml";
            public readonly string RepairProviderJobDetails = "~/Views/Job/RepairProviderJobDetails.cshtml";
            public readonly string Show = "~/Views/Job/Show.cshtml";
            public readonly string WarrantyProviderJobDetails = "~/Views/Job/WarrantyProviderJobDetails.cshtml";
            static readonly _JobPartsClass s_JobParts = new _JobPartsClass();
            public _JobPartsClass JobParts { get { return s_JobParts; } }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public partial class _JobPartsClass
            {
                static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
                public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
                public class _ViewNamesClass
                {
                    public readonly string _Subject = "_Subject";
                    public readonly string Components = "Components";
                    public readonly string Flags = "Flags";
                    public readonly string Insurance = "Insurance";
                    public readonly string JobMetaAdditions = "JobMetaAdditions";
                    public readonly string NonWarranty = "NonWarranty";
                    public readonly string NonWarrantyFinance = "NonWarrantyFinance";
                    public readonly string Queues = "Queues";
                    public readonly string Repairs = "Repairs";
                    public readonly string Resources = "Resources";
                    public readonly string Warranty = "Warranty";
                }
                public readonly string _Subject = "~/Views/Job/JobParts/_Subject.cshtml";
                public readonly string Components = "~/Views/Job/JobParts/Components.cshtml";
                public readonly string Flags = "~/Views/Job/JobParts/Flags.cshtml";
                public readonly string Insurance = "~/Views/Job/JobParts/Insurance.cshtml";
                public readonly string JobMetaAdditions = "~/Views/Job/JobParts/JobMetaAdditions.cshtml";
                public readonly string NonWarranty = "~/Views/Job/JobParts/NonWarranty.cshtml";
                public readonly string NonWarrantyFinance = "~/Views/Job/JobParts/NonWarrantyFinance.cshtml";
                public readonly string Queues = "~/Views/Job/JobParts/Queues.cshtml";
                public readonly string Repairs = "~/Views/Job/JobParts/Repairs.cshtml";
                public readonly string Resources = "~/Views/Job/JobParts/Resources.cshtml";
                public readonly string Warranty = "~/Views/Job/JobParts/Warranty.cshtml";
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_JobController : Disco.Web.Controllers.JobController
    {
        public T4MVC_JobController() : base(Dummy.Instance) { }

        [NonAction]
        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void QueueOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        [NonAction]
        public override System.Web.Mvc.ActionResult Queue(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Queue);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            QueueOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void AllOpenOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult AllOpen()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AllOpen);
            AllOpenOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void AwaitingTechnicianActionOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult AwaitingTechnicianAction()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AwaitingTechnicianAction);
            AwaitingTechnicianActionOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void DevicesReadyForReturnOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult DevicesReadyForReturn()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DevicesReadyForReturn);
            DevicesReadyForReturnOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void DevicesAwaitingRepairOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult DevicesAwaitingRepair()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DevicesAwaitingRepair);
            DevicesAwaitingRepairOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void AwaitingFinanceOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult AwaitingFinance()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AwaitingFinance);
            AwaitingFinanceOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void AwaitingFinanceChargeOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult AwaitingFinanceCharge()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AwaitingFinanceCharge);
            AwaitingFinanceChargeOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void AwaitingFinancePaymentOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult AwaitingFinancePayment()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AwaitingFinancePayment);
            AwaitingFinancePaymentOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void AwaitingFinanceInsuranceProcessingOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult AwaitingFinanceInsuranceProcessing()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AwaitingFinanceInsuranceProcessing);
            AwaitingFinanceInsuranceProcessingOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void AwaitingFinanceAgreementBreachOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult AwaitingFinanceAgreementBreach()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AwaitingFinanceAgreementBreach);
            AwaitingFinanceAgreementBreachOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void AwaitingUserActionOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult AwaitingUserAction()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AwaitingUserAction);
            AwaitingUserActionOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void RecentlyClosedOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult RecentlyClosed()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.RecentlyClosed);
            RecentlyClosedOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void LocationsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Locations()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Locations);
            LocationsOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void LongRunningOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult LongRunning()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.LongRunning);
            LongRunningOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void StaleOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Stale()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Stale);
            StaleOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ShowOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int? id);

        [NonAction]
        public override System.Web.Mvc.ActionResult Show(int? id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Show);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ShowOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void CreateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string DeviceSerialNumber, string UserId);

        [NonAction]
        public override System.Web.Mvc.ActionResult Create(string DeviceSerialNumber, string UserId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Create);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "DeviceSerialNumber", DeviceSerialNumber);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "UserId", UserId);
            CreateOverride(callInfo, DeviceSerialNumber, UserId);
            return callInfo;
        }

        [NonAction]
        partial void CreateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Disco.Web.Models.Job.CreateModel m);

        [NonAction]
        public override System.Web.Mvc.ActionResult Create(Disco.Web.Models.Job.CreateModel m)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Create);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "m", m);
            CreateOverride(callInfo, m);
            return callInfo;
        }

        [NonAction]
        partial void LogWarrantyOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string WarrantyProviderId, int? OrganisationAddressId);

        [NonAction]
        public override System.Web.Mvc.ActionResult LogWarranty(int id, string WarrantyProviderId, int? OrganisationAddressId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.LogWarranty);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "WarrantyProviderId", WarrantyProviderId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "OrganisationAddressId", OrganisationAddressId);
            LogWarrantyOverride(callInfo, id, WarrantyProviderId, OrganisationAddressId);
            return callInfo;
        }

        [NonAction]
        partial void LogWarrantyOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Disco.Web.Models.Job.LogWarrantyModel m, System.Web.Mvc.FormCollection form);

        [NonAction]
        public override System.Web.Mvc.ActionResult LogWarranty(Disco.Web.Models.Job.LogWarrantyModel m, System.Web.Mvc.FormCollection form)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.LogWarranty);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "m", m);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "form", form);
            LogWarrantyOverride(callInfo, m, form);
            return callInfo;
        }

        [NonAction]
        partial void WarrantyProviderJobDetailsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        [NonAction]
        public override System.Web.Mvc.ActionResult WarrantyProviderJobDetails(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.WarrantyProviderJobDetails);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            WarrantyProviderJobDetailsOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void LogRepairOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string RepairProviderId, int? OrganisationAddressId);

        [NonAction]
        public override System.Web.Mvc.ActionResult LogRepair(int id, string RepairProviderId, int? OrganisationAddressId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.LogRepair);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "RepairProviderId", RepairProviderId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "OrganisationAddressId", OrganisationAddressId);
            LogRepairOverride(callInfo, id, RepairProviderId, OrganisationAddressId);
            return callInfo;
        }

        [NonAction]
        partial void LogRepairOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Disco.Web.Models.Job.LogRepairModel m, System.Web.Mvc.FormCollection form);

        [NonAction]
        public override System.Web.Mvc.ActionResult LogRepair(Disco.Web.Models.Job.LogRepairModel m, System.Web.Mvc.FormCollection form)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.LogRepair);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "m", m);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "form", form);
            LogRepairOverride(callInfo, m, form);
            return callInfo;
        }

        [NonAction]
        partial void RepairProviderJobDetailsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        [NonAction]
        public override System.Web.Mvc.ActionResult RepairProviderJobDetails(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.RepairProviderJobDetails);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            RepairProviderJobDetailsOverride(callInfo, id);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
